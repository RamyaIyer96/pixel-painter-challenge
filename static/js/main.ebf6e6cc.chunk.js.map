{"version":3,"sources":["components/Toolbox.styles.js","components/Toolbox.jsx","components/Square.jsx","components/Canvas.styles.js","components/Canvas.jsx","helpers/common.js","components/Screen.styles.js","components/Screen.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToolboxContainer","styled","div","ToolboxIconParent","span","activeToolBox","ToolboxElement","props","active","Toolbox","tool","setConfig","color","onClick","prevConfig","title","icon","faPencilAlt","size","faFillDrip","Square","x","y","height","width","onFill","fill","stroke","shadowBlur","CanvasContainer","Canvas","canvasHeight","canvasWidth","useState","squares","setSquares","useEffect","response","push","id","map","square","idx","sqareIdx","existingColor","newSquares","fillColor","common","colors","canvasMaxLimit","ScreenContainer","ScreenHeader","ColorPicker","ScreenContent","ScreenToolbarContainer","ScreenCanvasContainer","DimentionInputs","NumberInput","input","attrs","type","Button","button","Screen","defaultConfig","config","inputValueChanged","e","target","value","onChangeComplete","hex","onChange","defaultValue","document","getElementById","Number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.ebf6e6cc.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const ToolboxContainer = styled.div`\n  text-align: center;\n`;\n\nexport const ToolboxIconParent = styled.span`\n  margin: auto;\n  font-size: 20px;\n`;\n\nconst activeToolBox = `\n    background: #ccc;\n    ${ToolboxIconParent} {\n      font-size: 21px;\n      color: #fff;\n    }\n`;\n\nexport const ToolboxElement = styled.div`\n  border-bottom: 2px solid #ccc;\n  padding: 5px;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  cursor: pointer;\n\n  &:hover {\n    ${activeToolBox}\n  }\n  ${props => props.active && activeToolBox}\n`;\n","import React from \"react\";\nimport { faPencilAlt, faFillDrip } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon as Icon } from \"@fortawesome/react-fontawesome\";\nimport {\n  ToolboxContainer,\n  ToolboxElement,\n  ToolboxIconParent,\n} from \"./Toolbox.styles\";\n\nconst Toolbox = ({ tool, color, setConfig }) => {\n  return (\n    <ToolboxContainer>\n      <ToolboxElement\n        active={tool === \"pencil\"}\n        onClick={() => {\n          setConfig((prevConfig) => ({ ...prevConfig, tool: \"pencil\" }));\n        }}\n        title=\"Pencil\"\n      >\n        <ToolboxIconParent>\n          <Icon icon={faPencilAlt} size=\"1x\" />\n        </ToolboxIconParent>\n      </ToolboxElement>\n      <ToolboxElement\n        active={tool === \"floodFill\"}\n        onClick={() => {\n          setConfig((prevConfig) => ({ ...prevConfig, tool: \"floodFill\" }));\n        }}\n        title=\"Flood Fill\"\n      >\n        <ToolboxIconParent>\n          <Icon icon={faFillDrip} size=\"1x\" />\n        </ToolboxIconParent>\n      </ToolboxElement>\n    </ToolboxContainer>\n  );\n};\n\nexport default Toolbox;\n","import React from \"react\";\nimport { Rect } from \"react-konva\";\n\nconst Square = ({ x, y, height, width, onFill, fill = \"\" }) => {\n  return (\n    <Rect\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      fill={fill}\n      stroke=\"#333\"\n      shadowBlur={1}\n      onClick={onFill}\n    />\n  );\n};\n\nexport default Square;\n","import styled from \"styled-components\";\n\nexport const CanvasContainer = styled.div`\n  canvas {\n    background: #fff !important;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport Square from \"./Square\";\nimport { CanvasContainer } from \"./Canvas.styles\";\n\nconst Canvas = ({ canvasHeight, canvasWidth, tool, color }) => {\n  const [squares, setSquares] = useState([]);\n\n  useEffect(() => {\n    const response = [];\n    for (let x = 0; x < canvasWidth; x += 15) {\n      for (let y = 0; y < canvasHeight; y += 15) {\n        response.push({\n          id: `${x}-${y}`,\n          x: x + 10,\n          y: y + 10,\n          height: 15,\n          width: 15,\n        });\n      }\n    }\n    setSquares(response);\n  }, [canvasHeight, canvasWidth, setSquares]);\n\n  const fillColor = (sqareIdx) => {\n    const existingColor = squares?.[sqareIdx]?.fill || \"\";\n    const newSquares = squares.map((square, idx) => {\n      if (\n        (tool === \"pencil\" && idx === sqareIdx) ||\n        (tool === \"floodFill\" && (square.fill || \"\") === existingColor)\n      ) {\n        square.fill = color;\n      }\n      return square;\n    });\n    setSquares(newSquares);\n  };\n\n  return (\n    <CanvasContainer>\n      <Stage width={canvasWidth} height={canvasHeight}>\n        <Layer>\n          {squares.map((square, idx) => (\n            <Square\n              key={square.id}\n              idx={idx}\n              onFill={() => {\n                fillColor(idx);\n              }}\n              {...square}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    </CanvasContainer>\n  );\n};\n\nexport default Canvas;\n","\nconst common = {\n    colors:[\n        \"#4D4D4D\",\n        \"#999999\",\n        \"#FFFFFF\",\n        \"#F44E3B\",\n        \"#FE9200\",\n        \"#FCDC00\",\n        \"#DBDF00\",\n        \"#A4DD00\",\n        \"#68CCCA\",\n        \"#73D8FF\",\n        \"#AEA1FF\",\n        \"#FDA1FF\",\n        \"#333333\",\n        \"#808080\",\n        \"#cccccc\",\n        \"#D33115\",\n        \"#E27300\",\n        \"#FCC400\",\n        \"#B0BC00\",\n        \"#68BC00\",\n        \"#16A5A5\",\n        \"#009CE0\",\n        \"#7B64FF\",\n        \"#FA28FF\"\n      ],\n      canvasHeight: 250,\n      canvasWidth:250,\n      canvasMaxLimit: 1024\n}\n\nexport default common;","import styled from \"styled-components\";\n\nexport const ScreenContainer = styled.div`\n  background: #eee;\n`;\n\nexport const ScreenHeader = styled.div`\n  height: 60px;\n  border-bottom: 2px solid #ccc;\n  display: flex;\n\n  div {\n    box-shadow: none !important;\n  }\n\n  .flexbox-fix {\n    display: none !important;\n  }\n`;\n\nexport const ColorPicker = styled.div`\n  margin: auto 0 auto 10px;\n`;\n\nexport const ScreenContent = styled.div`\n  display: flex;\n  min-height: 84vh;\n`;\n\nexport const ScreenToolbarContainer = styled.div`\n  border-right: 2px solid #ccc;\n  max-width: 80px;\n`;\n\nexport const ScreenCanvasContainer = styled.div`\n`;\n\nexport const DimentionInputs = styled.div`\n  margin: auto 0 auto 10px;\n`;\n\nexport const NumberInput = styled.input.attrs({ type: \"number\" })`\n  height: 25px;\n  width: 50px;\n  font-size: 20px;\n  font-weight: 600;\n  text-align: center;\n\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  \n  ::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const Button = styled.button`\n  height: 32px;\n  margin: auto 0 auto 10px;\n  font-size: 20px;\n  font-weight: 600;\n  border: 1px solid #000;\n  border-radius: 5px;\n  background: #000;\n  color: #fff;\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    border-color: #444 !important;\n    background: #444;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { CompactPicker } from \"react-color\";\n\nimport Toolbox from \"./Toolbox\";\nimport Canvas from \"./Canvas\";\nimport defaultConfig from \"../helpers/common\";\n\nimport {\n  ScreenContainer,\n  ScreenToolbarContainer,\n  ScreenCanvasContainer,\n  ScreenHeader,\n  ScreenContent,\n  DimentionInputs,\n  NumberInput,\n  Button,\n  ColorPicker,\n} from \"./Screen.styles\";\n\nconst Screen = () => {\n  const [config, setConfig] = useState({\n    tool: \"pencil\",\n    canvasHeight: defaultConfig.canvasHeight,\n    canvasWidth: defaultConfig.canvasWidth,\n    color: \"#333\",\n  });\n\n  const updateDimentions = () => {\n    const canvasHeight = document.getElementById(\"d-height\")?.value;\n    const canvasWidth = document.getElementById(\"d-width\")?.value;\n    setConfig((prevConfig) => ({\n      ...prevConfig,\n      canvasHeight: Number(canvasHeight),\n      canvasWidth: Number(canvasWidth),\n    }));\n  };\n\n  const inputValueChanged = (e) => {\n    if (e.target.value < 0) {\n      e.target.value = 0;\n    }\n    if (e.target.value > defaultConfig.canvasMaxLimit) {\n      e.target.value = defaultConfig.canvasMaxLimit;\n    }\n  };\n\n  return (\n    <ScreenContainer>\n      <ScreenHeader>\n        <ColorPicker>\n          <CompactPicker\n            color={config.color}\n            colors={defaultConfig.colors}\n            onChangeComplete={(e) => {\n              setConfig((prevConfig) => ({ ...prevConfig, color: e.hex }));\n            }}\n          />\n        </ColorPicker>\n        <DimentionInputs>\n          <span>Height:</span>\n          <NumberInput\n            id=\"d-height\"\n            onChange={inputValueChanged}\n            defaultValue={config.canvasHeight}\n          />\n        </DimentionInputs>\n        <DimentionInputs>\n          <span>Width:</span>\n          <NumberInput\n            onChange={inputValueChanged}\n            id=\"d-width\"\n            defaultValue={config.canvasWidth}\n          />\n        </DimentionInputs>\n        <Button onClick={updateDimentions}>Update</Button>\n      </ScreenHeader>\n      <ScreenContent>\n        <ScreenToolbarContainer>\n          <Toolbox {...config} setConfig={setConfig} />\n        </ScreenToolbarContainer>\n        <ScreenCanvasContainer>\n          <Canvas {...config} />\n        </ScreenCanvasContainer>\n      </ScreenContent>\n    </ScreenContainer>\n  );\n};\n\nexport default Screen;\n","import Screen from './components/Screen';\n\nfunction App() {\n  return (\n    <div>\n      <Screen />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}